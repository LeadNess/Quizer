#!/bin/bash
source ./venv/bin/activate 2>/dev/null
if [ "$?" -eq "1" ]
then
    echo "Error on activating venv. Have you created it? (python3 -m venv venv)"
    exit 1
fi
mkdir tmp
cp -r quizer tmp/quizer
rm -r quizer
echo "===========================================Start loading requirements==========================================="
pip install --no-cache-dir -r requirements.txt
echo "=========================================Successfully loaded requeirments======================================="
django-admin startproject quizer
cd quizer
python manage.py startapp main
cd ..
rm -r quizer
cp -r tmp/quizer quizer
rm -r tmp
python quizer/manage.py makemigrations
python quizer/manage.py migrate
echo "===========================================Initialized django app==============================================="
echo "===========================================Start creating groups==============================================="

echo 'from django.contrib.auth.models import Group; l = Group(id=1, name="lecturer"); l.save()' | python quizer/manage.py shell
echo "Created 'lecturer' group"
echo 'from django.contrib.auth.models import Group; s = Group(id=2, name="student"); s.save()' | python quizer/manage.py shell
echo "Created 'student' group"
echo "===========================================Enter superuser info==============================================="
python quizer/manage.py createsuperuser
echo 'from django.contrib.auth.models import User; a = User.objects.get(id=1); a.groups.add(1); a.save(); print("Added user %s to group %s" % (a.username, "lecturer"))'  | python quizer/manage.py shell
echo 'from django.contrib.auth.models import User; s = User(id=4, username="user"); s.set_password("password"); s.groups.add(2); s.save()' | python quizer/manage.py shell
echo "Added user 'user' with password 'password' to group 'student'"
echo "==========================================Enter configuration data:============================================="
read -p "Mongo host: " MDB_HOST
if [ "${MDB_HOST}" == "" ]
then
    MDB_HOST="localhost"
fi

read -p "Mongo port: " MDB_PORT
if [ "${MDB_PORT}" == "" ]
then
    MDB_PORT="27017"
fi

# TODO: write Mongo config to setting.py